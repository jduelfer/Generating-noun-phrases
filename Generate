from drawFSA import *
from random import randrange
import re
import operator

#lets define a transition table as a list of triples
transitions = [(1,'ADJ',2,.5),(1,'N',3,.3),(1,'DET',2,.7), (2,'ADJ',2,0.5),(2,'N',3,.9),(3,'POSS',4,.2),(3,'PREP',5,1),(4,'ADJ',2,1),(4,'N',3,.5),(5,'DET',2,1)]

#our machine will be a dictionary with 3 keys
my_dfsa = {'IS':1,'FS':[3],'T':transitions}

my_dfsa.keys()
my_dfsa.values()
my_dfsa['FS']

#these are lists of random adjectives
#Written by Jon
colors = ['black','blue','brown','gray','green','orange','pink','purple','red','white','yellow']
shape = ['broad','crooked','curved','deep','even','flat','hilly','jagged','round','shallow','square','steep','straight','thick','thin','triangular','uneven']
size = ['average','big','fat','gigantic','huge','large','little','long','massive','medium','miniature','narrow','petite','short','skinny','small','tall','tiny','wide']
speed = ['fast','quick','rapid','slow','swift']
sound = ['cooing','deafening','faint','harsh','high-pitched','hissing','hushed','husky','loud','melodic','moaning','mute','noisy','purring','quiet','raspy','screeching','shrill','silent','soft','squeaky','squealing','thundering','voiceless','whispering']
taste = ['bitter','bland','delicious','different','fresh','greasy','hot','juicy','repulsive','revolting','ripe','rotten','salty','sour','spicy','stale','strong','sweet','tasteless','tasty','terrible','wonderful']
time = ['ancient','brief','early','late','long','modern','new','old','old-fashioned','quick','short','young']
touch = ['blunt','boiling','breakable','breezy','broken','bumpy','chilly','clean','cold','cool','crooked','cuddly','curly','damaged','damp','different','dirty','dry','dusty','filthy','flaky','fluffy','fuzzy','greasy','grubby','hard','icy','loose','plastic','prickly','ripe','rough','rubbery','scratchy','shaky','shaggy','sharp','silky','slimy','slippery','smooth','soft','solid','steady','sticky','tight','uneven','unusual','unripe','warm','weak','wet','wooden','wooly']
feelings_negative = ['afraid','angry','annoyed','anxious','arrogant','ashamed','awful','bad','bewildered','bored','concerned','condemned','confused','creepy','cruel','dangerous','defeated','defiant','depressed','disgusted','disturbed','doubtful','eerie','embarrassed','envious','evil','fierce','foolish','frantic','frightened','grieving','guilty','helpless','hungry','hurt','ill','jealous','lonely','mad','naughty','nervous','obnoxious','outrageous','panicky','repulsive','safe','scared','shy','sleepy','sore','strange','tense','terrible','tired','troubled','unusual','upset','uptight','weary','wicked','worried']
feelings_neutral = ['alright','calm','different','fair','fine','OK','pleasant','puzzled']
feelings_positive = ['agreeable','alert','amused','brave','bright','charming','cheerful','comfortable','cooperative','courageous','delightful','determined','eager','elated','enchanting','encouraging','energetic','enthusiastic','excited','exuberant','faithful','fantastic','friendly','frowning','funny','gentle','glorious','good','happy','healthy','helpful','hilarious','innocent','jolly','kind','lively','lovely','lucky','obedient','perfect','proud','relaxed','relieved','silly','smiling','splendid','successful','thoughtful','victorious','vivacious','well','witty','wonderful']
appearance = ['adorable','alert','average','beautiful','blonde','bloody','blushing','bright','clean','clear','cloudy','colourful','concerned','crowded','curious','cute','dark','dirty','drab','distinct','dull','elegant','fancy','filthy','glamorous','gleaming','graceful','grotesque','homely','light','misty','motionless','muddy','plain','poised','quaint','scary','shiny','smoggy','sparkling','spotless','stormy','strange','ugly','unsightly','unusual']
condition = ['alive','brainy','broken','busy','careful','cautious','clever','crazy','damaged','dead','difficult','easy','fake','false','famous','forward','fragile','guilty','helpful','helpless','important','impossible','infamous','innocent','inquisitive','mad','modern','open','outgoing','outstanding','poor','powerful','puzzled','real','rich','right','robust','sane','scary','shy','sleepy','stupid','super','tame','thick','tired','wild','wrong']

adjectives = [colors, shape, size, speed, sound, taste, time, touch, feelings_negative, feelings_neutral, feelings_positive, appearance, condition]


#this is specified in the jurafsky paper
#it's a function that follows the tagged sentence input, moving through transitions in
#the fsa to see if the input is valid
def d_parse(fsa,sent):
    #return True if the string is accepted by the dfsa, and False otherwise

    i = 0   #set the index for the beginning of tape
    curr_state = fsa['IS']       #set the initial state
    while(i <= len(sent)):  #loop: while the tape is not empty
        if i+1 > len(sent):  #if end of input has been reached 
            if curr_state in fsa['FS']:                 #if current state is an acceptor state
                return True
            else:
                return False
        else:
            q = [tr for tr in fsa['T'] if (tr[0] == curr_state and tr[1] == sent[i])]
            if (q == []):  #if no transitions exist from curr_state that read the current symbol on the tape
                return False
            elif len(q) > 1: raise NameError('Non-deterministic machine.')  #if more than one transition with the same label
            else:
                curr_state = q[0][2]
                i += 1 #update the index on tape



#modified drecognize to randomly select branches to go to
#and random words to choose for each category
#returns a string of english
def generate_NP(fsa,word_bank):
    #a list of grammatical categories to define the output
    categories = []

    curr_state = fsa['IS']       #set the initial state
    more_states = True		 
    while(more_states):  #loop: while we haven't reached our final state
        q = [tr for tr in fsa['T'] if tr[0] == curr_state]
        if q == []:
            more_states = False

        #if current state isn't final or is final and random number is 1, keep going down 
        #the path, choosing a random  branch
        elif (curr_state in fsa['FS'] and randrange(4)==1) or (curr_state not in fsa['FS']):
            #compute a list of pseudo-random priorities for each valid state
            rand_vals = [tup[3]*(randrange(len(q))+1) for tup in q]
            #get the index of the state with the highest priority
            rand_state, value = max(enumerate(rand_vals), key=operator.itemgetter(1))
            curr_state = q[rand_state][2]
            categories.append(q[rand_state][1])
            
        #if the current state is final, and the random number isn't a 1, stop following the path
        else:
            more_states = False
    
    #for each category, find a random word in the word bank of the same category, and append it
    #to the english sentence
    english = ""
    i = 0
    while (i<len(categories)):
        num_adjectives = 0
        if categories[i] == "ADJ":
            num_adjectives += 1
            b = 1
            while(b>0):
                if categories[i+1] == "ADJ":
                    num_adjectives += 1
                    i += 1
                else:
                    b -= 1
            adjective_group = adj_group(num_adjectives)
            for adj in adjective_group:
                english += " " + adj
            i += 1
        elif categories[i] == "POSS":
            rand_word = word_bank[categories[i]][randrange(len(word_bank[categories[i]]))]
            english = english + rand_word
            i += 1
        else:
            rand_word = word_bank[categories[i]][randrange(len(word_bank[categories[i]]))]
            english = english + " " + rand_word
            i += 1
    english = a_or_an(english)
    return english

#dictionary of words, taken from the CHILDES file for Nina and adjectives then a list of 'common' adjectives
words = dict()
words['N'] = ['time','person','year','way','day','thing','man','world','life','hand','part','child','eye','woman','place','work','week','case','point','government','company','number','group','problem','fact']
words['DET'] = ['the','a','an','another','some','any','my','our','their','her','his','its','each','every','certain','this','that']
words['PL'] = ["s"]
words['POSS'] = ["'s"]
words['ADJ'] = adjectives
words['PN'] = ["Craig","Mrs. Woods","Nonna"]
words['PREP'] = ["of"]

#produces a group of adjectives to then get reordered
def adj_group(num_adjectives):
    """takes the number of adjectives together, generates them, and then reorders them"""
    choosen = []
    final_choosen = []
    j = 0
    #produce the number of adjectives according to the parameter
    while (j < num_adjectives):
        select = adjectives[randrange(0,len(adjectives))]
        choose = select[randrange(0,len(select))]
        choosen += [choose]
        j += 1
    #for the adjectives produced, put them into tuples representing the 'order' they will go in
    for word in choosen:
        if word in appearance:
            word = (word,1)
            final_choosen += [word]
        elif word in size:
            word = (word,2)
            final_choosen += [word]
        elif word in shape:
            word = (word,3)
            final_choosen += [word]
        elif word in speed:
            word = (word,7)
            final_choosen += [word]
        elif word in feelings_positive:
            word = (word,4)
            final_choosen += [word]
        elif word in feelings_neutral:
            word = (word,5)
            final_choosen += [word]
        elif word in feelings_negative:
            word = (word,6)
            final_choosen += [word]
        elif word in condition:
            word = (word,8)
            final_choosen += [word]
        elif word in sound:
            word = (word,9)
            final_choosen += [word]
        elif word in time:
            word = (word,10)
            final_choosen += [word]
        elif word in touch:
            word = (word,11)
            final_choosen += [word]
        elif word in taste:
            word = (word,12)
            final_choosen += [word]
        elif word in colors:
            word = (word,13)
            final_choosen += [word]
    final_choosen_clone = final_choosen
    min_to_max = []
    len_clone = len(final_choosen_clone)
    s=0
    while (s<len_clone):
        min_in = 13  #number of adjective categories 
        min_wrd = ""
        a=0
        #for the adjectives in the clone, remove min and put it in min_to_max
        while (a<len(final_choosen_clone)):
            if (final_choosen_clone[a][1]<=min_in):
                min_in = final_choosen_clone[a][1]
                min_wrd = final_choosen_clone[a][0]
            a += 1
        min_to_max += [min_wrd] #list of reordered adjectives
        final_choosen_clone.remove((min_wrd,min_in))
        s += 1
    #returns a list of adjectives ordered in a grammatical fashion
    return min_to_max
    
#helper function to get the correct 'a' or 'an'
def a_or_an(string): 
    new_string = string.split(' ')   
    z=0        
    for word in string.split(' '):
        if word == "a":
            if re.search('^[aeiou]',new_string[z+1]):
                new_string[z] = "an"
        if word == "an":
            if re.search('^[^aeiou]',new_string[z+1]):
                new_string[z] = "a"
        z += 1
    new_string = ' '.join(new_string)
    return new_string
#ordering = appearance, size, shape, speed, feelings_positive, feelings_neutral, feelings_negative, condition, time, touch, taste, colors,
print(generate_NP(my_dfsa,words))

#print d_parse(my_dfsa,["DET","N","PREP","DET","ADJ","ADJ","ADJ","ADJ","N"])
#the dog of the little child of the big, fat man
#print d_parse(my_dfsa,["DET","N","PREP","DET","ADJ","N","PREP","DET","ADJ","ADJ","N"])

#draw the dfsa:
#graph = draw_graph(my_dfsa,"example")   

#graph.write_png('example.png')
